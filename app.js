const express = require('express');
const multer = require('multer');
const ffmpeg = require('fluent-ffmpeg');
const cors = require('cors');
const path = require('path');
const { createClient } = require('redis');
const { v4: uuidv4 } = require('uuid');
const axios = require('axios');
const fs = require('fs'); 
const mongoose = require('mongoose');
const { S3 } = require('@aws-sdk/client-s3');
const osu = require('node-os-utils')
const cpu = osu.cpu
const mem = osu.mem
const drive = osu.drive

const { getHostnameData, getSpaceData } = require('./middleware/hostname'); // Import the function

const app = express();
const port = process.env.PORT || 3000;

app.use(cors());
app.use(express.json({ limit: '50mb' })); // ‡πÄ‡∏û‡∏¥‡πà‡∏° limit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON
app.use(express.urlencoded({ limit: '50mb', extended: true })); // ‡πÄ‡∏û‡∏¥‡πà‡∏° limit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö URL encoded
app.use(express.static('public'));
app.use(express.static('outputs'));

// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ multer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà
const upload = multer({ 
  dest: 'uploads/',
  limits: {
    fileSize: 5 * 1024 * 1024 * 1024, // 5GB limit
    fieldSize: 10 * 1024 * 1024 // 10MB limit for other fields
  },
  fileFilter: (req, file, cb) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
    if (file.mimetype.startsWith('video/') || file.mimetype.startsWith('audio/')) {
      cb(null, true);
    } else {
      cb(new Error('Only video and audio files are allowed'), false);
    }
  }
});

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB
mongoose.connect('mongodb+srv://vue:Qazwsx1234!!@cloudmongodb.wpc62e9.mongodb.net/API', {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => {
  console.log('MongoDB :: Connected.');
}).catch(err => {
  console.error('Failed to connect to MongoDB:', err);
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Schema ‡πÅ‡∏•‡∏∞ Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß
const taskSchema = new mongoose.Schema({
  taskId: String,
  status: String,
  quality: String,
  createdAt: Date,
  inputPath: String,
  outputFile: String,
  percent: Number,
  url: String,
  site: Object,
  space: Object,
  storage: String,
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö video trimming
  type: { type: String, default: 'convert' }, // 'convert' ‡∏´‡∏£‡∏∑‡∏≠ 'trim'
  startTime: String,  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö trim
  endTime: String,    // ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö trim
  originalFilename: String, // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö text ‡πÅ‡∏•‡∏∞ image overlay
  textOverlay: Object,  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• text overlay
  imageOverlay: Object, // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• image overlay
  error: String,       // ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö advanced trim features
  trimData: {
    mode: String,           // 'single' ‡∏´‡∏£‡∏∑‡∏≠ 'multi'
    segments: [Object],     // array ‡∏Ç‡∏≠‡∏á segments ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö multi-trim
    overlays: [Object],     // array ‡∏Ç‡∏≠‡∏á overlays (text/image)
    videoMetadata: Object,  // metadata ‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    audioVolume: Number,    // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    outputFormat: String,   // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå output
    processingMode: String, // ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    filename: String,       // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå output
    copyStreams: Boolean,   // copy streams ‡∏´‡∏£‡∏∑‡∏≠ re-encode
    audioFilter: String,    // audio filter
    preserveQuality: Boolean, // ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
    hardwareAcceleration: Boolean, // ‡πÉ‡∏ä‡πâ hardware acceleration
    threads: String         // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô threads
  },
  clientInfo: Object      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• client
});

const Task = mongoose.model('Queue', taskSchema);

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Storage
const storageSchema = new mongoose.Schema({
  owner: { type: String, required: true }, // ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
  original: { type: String, required: true }, // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
  path: { type: String, required: true }, // URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
  parent: { type: String, default: '' }, // ID ‡∏Ç‡∏≠‡∏á parent
  name: { type: String, required: true }, // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
  size: { type: Number, required: true }, // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
  type: { type: String, required: true }, // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
  mimetype: { type: String, required: true }, // MIME type
  spaceId: { type: String, required: true }, // ID ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
  createdAt: { type: Date, default: Date.now }, // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
  updatedAt: { type: Date, default: Date.now }, // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
  duration: { type: Number, default: 0 }, // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢)
  thumbnail: { type: String, default: '' }, // URL ‡∏Ç‡∏≠‡∏á thumbnail
  transcode: { type: Object, default: {} } // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå transcode
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Storage
const Storage = mongoose.model('storage', storageSchema, 'storage'); // Specify collection name as 'hostname'

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
function selectThaiFont() {
  const thaiFonts = [
    {
      path: '/usr/share/fonts/truetype/tlwg/Garuda.ttf',
      name: 'Garuda',
      description: '‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢'
    },
    {
      path: '/usr/share/fonts/truetype/tlwg/Waree.ttf',
      name: 'Waree', 
      description: '‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏™‡∏ß‡∏¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠'
    },
    {
      path: '/usr/share/fonts/truetype/tlwg/TlwgTypist.ttf',
      name: 'Tlwg Typist',
      description: '‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏î‡∏µ‡∏î'
    },
    {
      path: '/usr/share/fonts/truetype/tlwg/Kinnari-Italic.ttf',
      name: 'Kinnari',
      description: '‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠'
    }
  ];
  
  for (const font of thaiFonts) {
    if (fs.existsSync(font.path)) {
      console.log(`‚úÖ Selected Thai font: ${font.name} (${font.description})`);
      console.log(`üìÅ Font path: ${font.path}`);
      return font;
    }
  }
  
  // Fallback
  const fallbackPath = '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf';
  console.log(`‚ö†Ô∏è  Using fallback font: ${fallbackPath}`);
  return { path: fallbackPath, name: 'DejaVu Sans', description: 'Fallback font' };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
function calculateDuration(startTime, endTime) {
  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  function timeToSeconds(time) {
    if (typeof time === 'number') return time;
    
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM:SS, MM:SS, ‡∏´‡∏£‡∏∑‡∏≠ SS
    const parts = time.toString().split(':').reverse();
    let seconds = 0;
    
    if (parts[0]) seconds += parseFloat(parts[0]); // ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    if (parts[1]) seconds += parseInt(parts[1]) * 60; // ‡∏ô‡∏≤‡∏ó‡∏µ
    if (parts[2]) seconds += parseInt(parts[2]) * 3600; // ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    
    return seconds;
  }
  
  const startSeconds = timeToSeconds(startTime);
  const endSeconds = timeToSeconds(endTime);
  const duration = endSeconds - startSeconds;
  
  if (duration <= 0) {
    throw new Error('End time must be greater than start time');
  }
  
  console.log(`üìê Duration calculation: ${startTime} (${startSeconds}s) - ${endTime} (${endSeconds}s) = ${duration}s`);
  return duration;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á text overlay filter
function createTextOverlayFilter(overlay, videoSize, inputLabel, outputLabel) {
  const selectedFont = selectThaiFont();
  const fontPath = selectedFont.path;
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å percentage
  const videoWidth = parseInt(videoSize.split('x')[0]);
  const videoHeight = parseInt(videoSize.split('x')[1]);
  
  const x = Math.round((overlay.position.x / 100) * videoWidth);
  const y = Math.round((overlay.position.y / 100) * videoHeight);
  
  // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const cleanText = overlay.content
    .replace(/'/g, "'")
    .replace(/"/g, '"')
    .replace(/\\/g, '\\\\')
    .replace(/:/g, '\\:')
    .replace(/\n/g, '\\n');
  
  const encodedText = Buffer.from(cleanText, 'utf8').toString('utf8');
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á filter
  const textFilter = `${inputLabel}drawtext=text='${encodedText}':fontsize=${overlay.style.font_size || 24}:fontcolor=${overlay.style.color || 'white'}:x=${x}:y=${y}:fontfile='${fontPath}':enable='between(t,${overlay.start_time || 0},${overlay.end_time || 999999})':shadowcolor=black@0.8:shadowx=2:shadowy=2:borderw=2:bordercolor=black@0.7${outputLabel}`;
  
  console.log(`üìù Text overlay: "${encodedText}" at (${x}, ${y})`);
  return textFilter;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á image overlay filter
function createImageOverlayFilter(overlay, videoSize, inputLabel, outputLabel, inputIndex) {
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏≤‡∏Å percentage
  const videoWidth = parseInt(videoSize.split('x')[0]);
  const videoHeight = parseInt(videoSize.split('x')[1]);
  
  const x = Math.round((overlay.position.x / 100) * videoWidth);
  const y = Math.round((overlay.position.y / 100) * videoHeight);
  const width = Math.round((overlay.position.width / 100) * videoWidth);
  const height = Math.round((overlay.position.height / 100) * videoHeight);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á filter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scale ‡πÅ‡∏•‡∏∞ overlay
  const scaleFilter = `[${inputIndex}:v]scale=${width}:${height}:force_original_aspect_ratio=decrease,format=rgba,colorchannelmixer=aa=${overlay.style.opacity || 1.0}[scaled_img_${inputIndex}]`;
  const overlayFilter = `${inputLabel}[scaled_img_${inputIndex}]overlay=${x}:${y}:enable='between(t,${overlay.start_time || 0},${overlay.end_time || 999999})'${outputLabel}`;
  
  console.log(`üñºÔ∏è Image overlay: ${overlay.content} at (${x}, ${y}) size ${width}x${height}`);
  return [scaleFilter, overlayFilter];
}

let ffmpegProcesses = {}; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ ffmpeg
let isProcessing = false; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
let concurrentJobs = 0; // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
const MAX_CONCURRENT_JOBS = 2; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (‡∏à‡∏≤‡∏Å 1)
const DOWNLOAD_TIMEOUT = 30 * 60 * 1000; // 30 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
const FFMPEG_TIMEOUT = 3 * 60 * 60 * 1000; // 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà

const baseUrl = `http://159.65.131.165:${port}`; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï base URL

// Endpoint: Get video metadata from URL
app.post('/metadata', async (req, res) => {
  const { url } = req.body;

  if (!url) {
    return res.status(400).json({ success: false, error: 'URL is required' });
  }

  console.log('Getting metadata for URL:', url);

  try {
    // ‡πÉ‡∏ä‡πâ ffprobe ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á metadata ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    ffmpeg.ffprobe(url, (err, metadata) => {
      if (err) {
        console.error('Error getting metadata:', err);
        return res.status(500).json({ 
          success: false, 
          error: 'Failed to get video metadata',
          details: err.message 
        });
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å metadata
      const videoStream = metadata.streams.find(stream => stream.codec_type === 'video');
      const audioStream = metadata.streams.find(stream => stream.codec_type === 'audio');
      
      const videoInfo = {
        success: true,
        metadata: {
          format: {
            filename: metadata.format.filename,
            format_name: metadata.format.format_name,
            format_long_name: metadata.format.format_long_name,
            duration: parseFloat(metadata.format.duration),
            size: parseInt(metadata.format.size) || 0,
            bit_rate: parseInt(metadata.format.bit_rate) || 0,
            nb_streams: metadata.format.nb_streams,
            tags: metadata.format.tags || {}
          },
          video: videoStream ? {
            codec_name: videoStream.codec_name,
            codec_long_name: videoStream.codec_long_name,
            width: videoStream.width,
            height: videoStream.height,
            aspect_ratio: videoStream.display_aspect_ratio || `${videoStream.width}:${videoStream.height}`,
            pixel_format: videoStream.pix_fmt,
            frame_rate: videoStream.r_frame_rate,
            avg_frame_rate: videoStream.avg_frame_rate,
            bit_rate: parseInt(videoStream.bit_rate) || 0,
            duration: parseFloat(videoStream.duration) || 0,
            tags: videoStream.tags || {}
          } : null,
          audio: audioStream ? {
            codec_name: audioStream.codec_name,
            codec_long_name: audioStream.codec_long_name,
            sample_rate: parseInt(audioStream.sample_rate) || 0,
            channels: audioStream.channels,
            channel_layout: audioStream.channel_layout,
            bit_rate: parseInt(audioStream.bit_rate) || 0,
            duration: parseFloat(audioStream.duration) || 0,
            tags: audioStream.tags || {}
          } : null,
          streams: metadata.streams.map(stream => ({
            index: stream.index,
            codec_name: stream.codec_name,
            codec_type: stream.codec_type,
            duration: parseFloat(stream.duration) || 0,
            bit_rate: parseInt(stream.bit_rate) || 0
          }))
        }
      };

      console.log('Metadata extracted successfully');
      res.json(videoInfo);
    });

  } catch (error) {
    console.error('Error processing metadata request:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to process metadata request',
      details: error.message 
    });
  }
});

// Grouped Endpoints

// Endpoint: Add conversion task to queue
app.post('/convert', upload.single('video'), async (req, res) => {
  console.log('Received conversion request');
  const quality = req.body.quality || '720p';
  const site = req.body.site;
  let taskId;

  // Validate if site is provided
  if (!site) {
    console.log('Site is required');
    return res.status(400).json({ success: false, error: 'Site is required' });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏≠
  const queuedCount = await Task.countDocuments({ status: 'queued' });
  const processingCount = await Task.countDocuments({ status: 'processing' });
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö system load
  const systemLoad = await checkSystemLoad();
  
  if (queuedCount > 50) { // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏á‡∏≤‡∏ô
    return res.status(429).json({ 
      success: false, 
      error: 'Queue is full. Please try again later.',
      queueStatus: { queued: queuedCount, processing: processingCount }
    });
  }

  // ‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡∏±‡∏Å ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô
  if (!systemLoad.canProcess) {
    console.log(`Accepting job despite high load (CPU: ${systemLoad.cpuUsage}%, Memory: ${systemLoad.memoryUsage}%)`);
  }

  // Fetch hostname data
  let hostnameData;
  let spaceData;
  try {
    hostnameData = await getHostnameData(site);
    console.log('Fetched hostname data:', hostnameData);
    if (!hostnameData) {
      console.log('Hostname not found');
      return res.status(404).json({ success: false, error: 'Hostname not found' });
    }
  } catch (error) {
    console.error('Failed to fetch hostname data:', error);
    return res.status(500).json({ success: false, error: 'Failed to fetch hostname data' });
  }

  try {
    spaceData = await getSpaceData(hostnameData.spaceId);
    console.log('Fetched space data:', spaceData);
    if (!spaceData) {
      console.log('Space not found');
      return res.status(404).json({ success: false, error: 'Space not found' });
    }
  } catch (error) {
    console.error('Failed to fetch space data:', error);
    return res.status(500).json({ success: false, error: 'Failed to fetch space data' });
  }

  try {
    if (req.file) {
      console.log('File uploaded:', req.file.path);
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
      if (req.file.size > 5 * 1024 * 1024 * 1024) { // 5GB
        return res.status(400).json({ success: false, error: 'File size exceeds 5GB limit' });
      }
      
      const existingTask = await Task.findOne({ inputPath: req.file.path, quality: quality });
      if (existingTask) {
        console.log('Existing task found:', existingTask.taskId);
        return res.json({ success: true, taskId: existingTask.taskId });
      }
      taskId = uuidv4();
    } else if (req.body.url) {
      console.log('URL provided:', req.body.url);
      const existingTask = await Task.findOne({ url: req.body.url, quality: quality });
      if (existingTask) {
        console.log('Existing task found:', existingTask.taskId);
        return res.json({ success: true, taskId: existingTask.taskId });
      }
      taskId = uuidv4();
    } else {
      console.log('No video file or URL provided');
      return res.status(400).json({ success: false, error: 'Video file or URL required' });
    }

    // Construct task data with hostname reference
    const taskData = {
      taskId,
      status: 'queued',
      quality,
      createdAt: Date.now(),
      outputFile: null,
      inputPath: req.file ? req.file.path : undefined,
      url: req.body.url,
      site: hostnameData,
      space: spaceData,
      storage: req.body.storage,
      retryCount: 0, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£ retry
      // Text overlay settings
      textOverlay: req.body.textOverlay ? {
        text: req.body.textOverlay.text || '',
        position: req.body.textOverlay.position || 'bottom-right',
        color: req.body.textOverlay.color || 'white',
        size: req.body.textOverlay.size || 'medium',
        x: req.body.textOverlay.x || null,
        y: req.body.textOverlay.y || null
      } : null,
      // Image overlay settings
      imageOverlay: req.body.imageOverlay ? {
        imagePath: req.body.imageOverlay.imagePath || null,
        position: req.body.imageOverlay.position || 'top-right',
        size: req.body.imageOverlay.size || '200x200',
        x: req.body.imageOverlay.x || null,
        y: req.body.imageOverlay.y || null,
        opacity: req.body.imageOverlay.opacity || 1.0
      } : null
    };

    console.log('Task data created:', taskData);
    await Task.create(taskData);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô storage
    if (taskData.storage) {
      await Storage.findOneAndUpdate(
        { _id: new mongoose.Types.ObjectId(taskData.storage) },
        { $set: { [`transcode.${taskData.quality}`]: 'queue...' } },
        { new: true }
      ).exec();
    }

    console.log('Process queue started for task:', taskId);
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
    if (concurrentJobs < MAX_CONCURRENT_JOBS) {
      processQueue(taskId, taskData);
    }

    res.json({ 
      success: true, 
      taskId, 
      downloadLink: `${baseUrl}/outputs/${taskId}-output.mp4`,
      site: hostnameData,
      space: spaceData,
      queuePosition: queuedCount + 1
    });

  } catch (error) {
    console.error('Error in convert endpoint:', error);
    
    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    if (req.file && req.file.path) {
      try {
        fs.unlinkSync(req.file.path);
      } catch (cleanupError) {
        console.error('Error cleaning up uploaded file:', cleanupError);
      }
    }
    
    res.status(500).json({ 
      success: false, 
      error: 'Internal server error',
      details: error.message 
    });
  }
});

// Endpoint: Check status and get result
app.get('/status/:taskId', async (req, res) => {
  const taskId = req.params.taskId;
  const task = await Task.findOne({ taskId }); // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô MongoDB

  if (!task) {
    return res.status(404).json({ success: false, error: 'Task not found' });
  }
  
  const response = {
    success: true,
    task,
    percent: task.status === 'processing' ? calculatePercent(task) : 100, // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    downloadLink: task.status === 'completed' ? `${baseUrl}/outputs/${taskId}-output.mp4` : null // ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'completed'
  };

  res.json(response);
});

// Endpoint: Get all tasks in the queue
app.get('/tasks', async (req, res) => {
  try {
    const tasks = await Task.find(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å MongoDB
    res.json({ success: true, tasks }); // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  } catch (error) {
    console.error('Error fetching tasks:', error);
    res.status(500).json({ success: false, error: 'Failed to fetch tasks' });
  }
});

// Endpoint: Start task by ID
app.post('/start/:taskId', async (req, res) => {
  const taskId = req.params.taskId;
  const task = await Task.findOne({ taskId }); // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡πÉ‡∏ô MongoDB

  if (!task) {
    return res.status(404).json({ success: false, error: 'Task not found' });
  }

  // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'error'
  if (task.status !== 'queued' && task.status !== 'error') {
    return res.status(400).json({ success: false, error: 'Task is not in a queued or error state' });
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ ffmpeg
  processQueue(taskId, task);

  res.json({ success: true, message: `Task ${taskId} started.` });
});

// Endpoint: Stop ffmpeg process
app.post('/stop/:taskId', async (req, res) => {
  const taskId = req.params.taskId;

  if (ffmpegProcesses[taskId]) {
    ffmpegProcesses[taskId].kill('SIGINT'); // ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£
    delete ffmpegProcesses[taskId]; // ‡∏•‡∏ö‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    await Task.updateOne({ taskId }, { status: 'stopped' }); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô MongoDB
    concurrentJobs--; // ‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏á‡∏≤‡∏ô
    processNextQueue(); // ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    return res.json({ success: true, message: `Process for task ${taskId} stopped.` });
  } else {
    return res.status(404).json({ success: false, error: 'Task not found or already completed.' });
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
app.get('/system-status', async (req, res) => {
  try {
    const totalTasks = await Task.countDocuments();
    const queuedTasks = await Task.countDocuments({ status: 'queued' });
    const processingTasks = await Task.countDocuments({ status: 'processing' });
    const completedTasks = await Task.countDocuments({ status: 'completed' });
    const errorTasks = await Task.countDocuments({ status: 'error' });

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• system load
    const systemLoad = await checkSystemLoad();

    res.json({
      success: true,
      system: {
        concurrentJobs,
        maxConcurrentJobs: MAX_CONCURRENT_JOBS,
        activeProcesses: Object.keys(ffmpegProcesses).length,
        downloadTimeout: DOWNLOAD_TIMEOUT / 1000, // in seconds
        ffmpegTimeout: FFMPEG_TIMEOUT / 1000, // in seconds
        systemLoad: {
          cpuUsage: systemLoad.cpuUsage,
          memoryUsage: systemLoad.memoryUsage,
          canProcess: systemLoad.canProcess,
          thresholds: systemLoad.thresholds,
          serverSpecs: {
            cores: 4,
            ramGB: 8,
            diskGB: 120
          }
        }
      },
      tasks: {
        total: totalTasks,
        queued: queuedTasks,
        processing: processingTasks,
        completed: completedTasks,
        error: errorTasks
      }
    });
  } catch (error) {
    res.status(500).json({ success: false, error: 'Failed to get system status' });
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö retry ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà error
app.post('/retry-failed', async (req, res) => {
  try {
    const result = await Task.updateMany(
      { status: 'error' },
      { $set: { status: 'queued' }, $unset: { error: 1 } }
    );
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    processNextQueue();
    
    res.json({ 
      success: true, 
      message: `${result.modifiedCount} failed tasks have been queued for retry` 
    });
  } catch (error) {
    res.status(500).json({ success: false, error: 'Failed to retry failed tasks' });
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cleanup ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤
app.delete('/cleanup-old-tasks', async (req, res) => {
  try {
    const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    const result = await Task.deleteMany({
      createdAt: { $lt: oneWeekAgo },
      status: { $in: ['completed', 'error', 'stopped'] }
    });
    
    res.json({ 
      success: true, 
      message: `${result.deletedCount} old tasks have been cleaned up` 
    });
  } catch (error) {
    res.status(500).json({ success: false, error: 'Failed to cleanup old tasks' });
  }
});

// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (Video Trimming) - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Advanced Features
app.post('/trim', upload.single('video'), async (req, res) => {
  const taskId = uuidv4();
  
  try {
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞ JSON payload
    let videoData = {};
    
    if (req.body.input_url) {
      // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON payload (Advanced mode)
      videoData = {
        input_url: req.body.input_url,
        trim_mode: req.body.trim_mode || 'single',
        segments: req.body.segments || [],
        overlays: req.body.overlays || [],
        video_metadata: req.body.video_metadata || {},
        audio_volume: req.body.audio_volume || 1,
        output_format: req.body.output_format || 'mp4',
        quality: req.body.quality || '720p',
        processing_mode: req.body.processing_mode || 'fast',
        filename: req.body.filename || `${taskId}-trimmed.mp4`,
        site: req.body.site || '',
        storage: req.body.storage || '',
        client_info: req.body.client_info || {}
      };
      
      console.log(`üé¨ Advanced trim request: ${videoData.trim_mode} mode with ${videoData.segments.length} segments`);
      
    } else if (req.file) {
      // ‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (Basic mode) - ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
      const { startTime, endTime, quality = '720p' } = req.body;
      
      if (!startTime || !endTime) {
        return res.status(400).json({ 
          success: false, 
          error: 'Start time and end time are required (format: HH:MM:SS or seconds)' 
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
      const timeRegex = /^(\d{1,2}:)?(\d{1,2}:)?\d{1,2}(\.\d+)?$/;
      if (!timeRegex.test(startTime) || !timeRegex.test(endTime)) {
        return res.status(400).json({ 
          success: false, 
          error: 'Invalid time format. Use HH:MM:SS or seconds' 
        });
      }
      
      videoData = {
        inputPath: req.file.path,
        originalFilename: req.file.originalname,
        startTime,
        endTime,
        quality,
        trim_mode: 'single'
      };
      
    } else {
      return res.status(400).json({ 
        success: false, 
        error: 'No video file or input_url provided' 
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    const newTask = new Task({
      taskId,
      originalFilename: videoData.originalFilename || videoData.filename || 'video.mp4',
      inputPath: videoData.inputPath,
      url: videoData.input_url,
      quality: videoData.quality,
      startTime: videoData.startTime,
      endTime: videoData.endTime,
      type: 'trim',
      status: 'queued',
      percent: 0,
      createdAt: new Date(),
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö advanced trim
      trimData: {
        mode: videoData.trim_mode,
        segments: videoData.segments,
        overlays: videoData.overlays,
        videoMetadata: videoData.video_metadata,
        audioVolume: videoData.audio_volume,
        outputFormat: videoData.output_format,
        processingMode: videoData.processing_mode,
        filename: videoData.filename,
        copyStreams: videoData.copy_streams,
        audioFilter: videoData.audio_filter,
        preserveQuality: videoData.preserve_quality,
        hardwareAcceleration: videoData.hardware_acceleration,
        threads: videoData.threads
      },
      site: { spaceId: videoData.storage },
      storage: videoData.storage,
      clientInfo: videoData.client_info
    });

    await newTask.save();
    
    if (videoData.trim_mode === 'multi') {
      console.log(`‚úÇÔ∏è Multi-segment trim task created: ${taskId}`);
      console.log(`üìä Segments: ${videoData.segments.length}`);
      console.log(`üé® Overlays: ${videoData.overlays.length}`);
    } else {
      console.log(`‚úÇÔ∏è Single trim task created: ${taskId} (${videoData.startTime} - ${videoData.endTime})`);
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏¥‡∏ß
    processNextQueue();

    res.json({ 
      success: true, 
      taskId, 
      message: `Video ${videoData.trim_mode} trim task queued successfully`,
      trimMode: videoData.trim_mode,
      segments: videoData.segments?.length || 1,
      overlays: videoData.overlays?.length || 0,
      quality: videoData.quality,
      processingMode: videoData.processing_mode
    });

  } catch (error) {
    console.error('Error creating trim task:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Internal server error: ' + error.message 
    });
  }
});

// Serve 'outputs' folder publicly
app.use('/outputs', express.static(path.join(__dirname, 'outputs')));

// ‡πÄ‡∏û‡∏¥‡πà‡∏° route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Error handling middleware
app.use((error, req, res, next) => {
  if (error instanceof multer.MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({
        success: false,
        error: 'File too large. Maximum size is 5GB.'
      });
    }
    if (error.code === 'LIMIT_UNEXPECTED_FILE') {
      return res.status(400).json({
        success: false,
        error: 'Unexpected file field.'
      });
    }
  }
  
  if (error.message === 'Only video and audio files are allowed') {
    return res.status(400).json({
      success: false,
      error: 'Only video and audio files are allowed.'
    });
  }

  console.error('Unhandled error:', error);
  res.status(500).json({
    success: false,
    error: 'Internal server error'
  });
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡πÉ‡∏´‡∏°‡πà
app.get('/system-metrics', async (req, res) => {
  try {
    const [cpuUsage, memInfo, diskInfo] = await Promise.all([
      cpu.usage(), // CPU usage percentage
      mem.info(), // Memory information
      drive.info() // Disk information
    ])

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
    const usedMemoryMB = Math.round(memInfo.usedMemMb);
    const totalMemoryMB = Math.round(memInfo.totalMemMb);
    const usedDiskGB = Math.round(diskInfo.usedGb);
    const totalDiskGB = Math.round(diskInfo.totalGb);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á
    const memoryPercent = Math.round((usedMemoryMB / totalMemoryMB) * 100);
    const diskPercent = Math.round((usedDiskGB / totalDiskGB) * 100);
    
    res.json({
      cpu: {
        cores: 4, // ‡∏ï‡∏≤‡∏° server ‡∏à‡∏£‡∏¥‡∏á
        usage: Math.round(cpuUsage), // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
        type: 'Regular Intel'
      },
      memory: {
        total: totalMemoryMB, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        used: usedMemoryMB,
        free: totalMemoryMB - usedMemoryMB,
        usagePercent: memoryPercent
      },
      disk: {
        total: totalDiskGB, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        used: usedDiskGB,
        free: totalDiskGB - usedDiskGB,
        usagePercent: diskPercent,
        bandwidth: {
          total: 5120, // 5TB
          unit: 'GB'
        }
      },
      server: {
        type: 'DigitalOcean Basic',
        specs: '4 CPU cores, 8GB RAM, 120GB SSD',
        price: {
          monthly: 48,
          hourly: 0.071
        }
      }
    })
  } catch (error) {
    console.error('Error getting system metrics:', error);
    res.status(500).json({ error: 'Failed to get system metrics' })
  }
})

// ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
app.get('/server-info', (req, res) => {
  res.json({
    server: {
      framework: 'Express.js',
      port: process.env.PORT || 3000,
      baseUrl: `http://159.65.131.165:${port}`,
      storage: {
        database: 'MongoDB',
        fileStorage: 'DigitalOcean Spaces'
      },
      middleware: ['CORS', 'JSON Parser', 'Static File Server']
    },
    ffmpeg: {
      library: 'fluent-ffmpeg',
      version: ffmpeg.version || 'N/A',
      videoCodec: 'libx264',
      preset: 'veryfast',
      crfValue: 22,
      supportedResolutions: ['240p', '420p', '720p', '1080p', '1920p']
    }
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    error: 'Endpoint not found'
  });
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
  console.log(`Max concurrent jobs: ${MAX_CONCURRENT_JOBS}`);
  console.log(`Download timeout: ${DOWNLOAD_TIMEOUT / 1000}s`);
  console.log(`FFmpeg timeout: ${FFMPEG_TIMEOUT / 1000}s`);
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  processNextQueue();
});

// Graceful shutdown
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

async function gracefulShutdown(signal) {
  console.log(`Received ${signal}. Starting graceful shutdown...`);
  
  // ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
  console.log('Stopping new job acceptance...');
  
  // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡∏£‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
  const shutdownTimeout = 30000;
  const startTime = Date.now();
  
  while (concurrentJobs > 0 && (Date.now() - startTime) < shutdownTimeout) {
    console.log(`Waiting for ${concurrentJobs} jobs to complete...`);
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // ‡∏´‡∏¢‡∏∏‡∏î ffmpeg processes ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
  for (const taskId in ffmpegProcesses) {
    console.log(`Killing ffmpeg process for task: ${taskId}`);
    ffmpegProcesses[taskId].kill('SIGTERM');
    await Task.updateOne({ taskId }, { status: 'stopped' });
  }
  
  // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  await mongoose.connection.close();
  console.log('Database connection closed.');
  
  console.log('Graceful shutdown completed.');
  process.exit(0);
}

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  gracefulShutdown('UNCAUGHT_EXCEPTION');
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  gracefulShutdown('UNHANDLED_REJECTION');
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cleanup ‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
async function cleanupTempFiles(inputPath, outputPath) {
  try {
    if (inputPath && fs.existsSync(inputPath)) {
      fs.unlinkSync(inputPath);
      console.log('Cleaned up input file:', inputPath);
    }
    if (outputPath && fs.existsSync(outputPath)) {
      fs.unlinkSync(outputPath);
      console.log('Cleaned up output file:', outputPath);
    }
  } catch (error) {
    console.error('Error cleaning up files:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° timeout
async function downloadWithTimeout(url, outputPath, timeout = DOWNLOAD_TIMEOUT) {
  return new Promise((resolve, reject) => {
    const timer = setTimeout(() => {
      reject(new Error('Download timeout'));
    }, timeout);

    axios.get(url, { 
      responseType: 'stream',
      timeout: timeout,
      maxContentLength: 5 * 1024 * 1024 * 1024, // 5GB limit
      maxBodyLength: 5 * 1024 * 1024 * 1024
    })
    .then(response => {
      const writer = fs.createWriteStream(outputPath);
      
      writer.on('error', (err) => {
        clearTimeout(timer);
        reject(err);
      });
      
      writer.on('finish', () => {
        clearTimeout(timer);
        resolve();
      });
      
      response.data.on('error', (err) => {
        clearTimeout(timer);
        writer.destroy();
        reject(err);
      });
      
      response.data.pipe(writer);
    })
    .catch(error => {
      clearTimeout(timer);
      reject(error);
    });
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö system load
async function checkSystemLoad() {
  try {
    const cpuUsage = await cpu.usage();
    const memInfo = await mem.info();
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å 4 cores ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    // CPU: ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ > 90% (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 85% ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
    // Memory: ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ > 85% (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 80%)
    const cpuOverload = cpuUsage > 90;
    const memoryUsagePercent = (memInfo.usedMemMb / memInfo.totalMemMb) * 100;
    const memoryOverload = memoryUsagePercent > 85;
    
    return {
      canProcess: !cpuOverload && !memoryOverload,
      cpuUsage,
      memoryUsage: memoryUsagePercent,
      thresholds: {
        cpu: 90,
        memory: 85
      }
    };
  } catch (error) {
    console.error('Error checking system load:', error);
    return { 
      canProcess: true, 
      cpuUsage: 0, 
      memoryUsage: 0,
      thresholds: { cpu: 90, memory: 85 }
    }; // Default to allow processing
  }
}

// Processing function
async function processQueue(taskId, taskData) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö system load ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô
  const systemLoad = await checkSystemLoad();
  if (!systemLoad.canProcess) {
    console.log(`System overloaded (CPU: ${systemLoad.cpuUsage}%, Memory: ${systemLoad.memoryUsage}%). Task ${taskId} delayed.`);
    // ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    setTimeout(() => processQueue(taskId, taskData), 30000);
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
  if (concurrentJobs >= MAX_CONCURRENT_JOBS) {
    console.log(`Max concurrent jobs reached (${MAX_CONCURRENT_JOBS}). Task ${taskId} remains queued.`);
    return;
  }

  concurrentJobs++; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏á‡∏≤‡∏ô
  console.log(`Processing queue for task: ${taskId} (Active jobs: ${concurrentJobs}/${MAX_CONCURRENT_JOBS})`);
  
  const outputFileName = `${taskId}-output.mp4`;
  const outputPath = path.join(__dirname, 'outputs', outputFileName);
  let inputPath = null;

  try {
    let videoSize;
    switch (taskData.quality) {
      case '240p': videoSize = '426x240'; break;
      case '420p': videoSize = '640x360'; break;
      case '720p': videoSize = '1280x720'; break;
      case '1080p': videoSize = '1920x1080'; break;
      case '1920p': videoSize = '1920x1080'; break;
      default: videoSize = '1280x720';
    }

    inputPath = taskData.inputPath || path.join('uploads', `${taskId}-input.mp4`);

    // If URL provided, download the video
    if (taskData.url) {
      console.log('Downloading video from URL:', taskData.url);
      await Task.updateOne({ taskId }, { status: 'downloading' });
      
      await Storage.findOneAndUpdate(
        { _id: new mongoose.Types.ObjectId(taskData.storage) },
        { $set: { [`transcode.${taskData.quality}`]: 'downloading...' } },
        { new: true }
      ).exec();

      try {
        await downloadWithTimeout(taskData.url, inputPath);
        console.log('Video downloaded to:', inputPath);
      } catch (downloadError) {
        console.error('Download failed for task:', taskId, downloadError);
        throw new Error(`Download failed: ${downloadError.message}`);
      }
    }

    await Task.updateOne({ taskId }, { status: 'processing' });
    console.log('Task status updated to processing for task:', taskId);

    const spaceData = JSON.parse(JSON.stringify(await getSpaceData(taskData.site.spaceId)));
    taskData.space = spaceData;

    const s3DataConfig = taskData.space;

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ S3 ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å taskData
    const s3Client = new S3({
      endpoint: `${taskData.space.s3EndpointDefault}`,
      region: `${taskData.space.s3Region}`,
      ResponseContentEncoding: "utf-8",
      credentials: {
        accessKeyId: s3DataConfig.s3Key,
        secretAccessKey: s3DataConfig.s3Secret
      },
      forcePathStyle: false
    });

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ ffmpeg ‡∏û‡∏£‡πâ‡∏≠‡∏° timeout
    console.log('Starting ffmpeg process for task:', taskId);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á filter complex ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö text ‡πÅ‡∏•‡∏∞ image overlay
    let filterComplexArray = [];
    let inputIndex = 0;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô video scale ‡πÅ‡∏•‡∏∞ text overlay
    let videoFilter = `[0:v]scale=${videoSize}:force_original_aspect_ratio=decrease,pad=${videoSize}:(ow-iw)/2:(oh-ih)/2,setsar=1[scaled]`;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° text overlay ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (taskData.textOverlay && taskData.textOverlay.text) {
      const textData = taskData.textOverlay;
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ï‡∏≤‡∏° video resolution
      let fontSize = Math.round(parseInt(videoSize.split('x')[1]) * 0.05); // 5% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
      switch (textData.size) {
        case 'small': fontSize = Math.round(fontSize * 0.7); break;
        case 'medium': fontSize = Math.round(fontSize * 1.0); break;
        case 'large': fontSize = Math.round(fontSize * 1.4); break;
      }
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á text
      let textPosition = 'x=10:y=10'; // default: ‡∏ö‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
      switch (textData.position) {
        case 'top-left': textPosition = 'x=10:y=10'; break;
        case 'top-center': textPosition = 'x=(w-text_w)/2:y=10'; break;
        case 'top-right': textPosition = 'x=w-text_w-10:y=10'; break;
        case 'center-left': textPosition = 'x=10:y=(h-text_h)/2'; break;
        case 'center': textPosition = 'x=(w-text_w)/2:y=(h-text_h)/2'; break;
        case 'center-right': textPosition = 'x=w-text_w-10:y=(h-text_h)/2'; break;
        case 'bottom-left': textPosition = 'x=10:y=h-text_h-10'; break;
        case 'bottom-center': textPosition = 'x=(w-text_w)/2:y=h-text_h-10'; break;
        case 'bottom-right': textPosition = 'x=w-text_w-10:y=h-text_h-10'; break;
        default: textPosition = textData.x && textData.y ? `x=${textData.x}:y=${textData.y}` : 'x=10:y=10';
      }
      
      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Thai font ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ú‡πà‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô selectThaiFont()
      const selectedFont = selectThaiFont();
      const fontPath = selectedFont.path;
      
      console.log(`Using Thai font: ${fontPath}`);
      
      // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ text ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Unicode
      let cleanText = textData.text
        .replace(/'/g, "'")           // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà single quote
        .replace(/"/g, '"')           // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà double quote
        .replace(/\\/g, '\\\\')       // escape backslash
        .replace(/:/g, '\\:')         // escape colon ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö FFmpeg
        .replace(/\n/g, '\\n');       // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà newline
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ FFmpeg ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
      const encodedText = Buffer.from(cleanText, 'utf8').toString('utf8');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á text filter ‡∏û‡∏£‡πâ‡∏≠‡∏° Thai font support, shadow ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
      const textFilter = `drawtext=text='${encodedText}':fontsize=${fontSize}:fontcolor=${textData.color || 'white'}:${textPosition}:fontfile='${fontPath}':enable='between(t,0,999999)':shadowcolor=black@0.8:shadowx=2:shadowy=2:borderw=2:bordercolor=black@0.7:box=1:boxcolor=black@0.3:boxborderw=5`;
      
      console.log(`üé® Text overlay: "${encodedText}"`);
      console.log(`üìù Using font: ${selectedFont.name} (${selectedFont.description})`);
      console.log(`üîß Text filter: ${textFilter}`);
      
      videoFilter += `[scaled]${textFilter}[text_overlay]`;
    } else {
      videoFilter += '[text_overlay]';
    }
    
    filterComplexArray.push(videoFilter);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° image overlay ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (taskData.imageOverlay && taskData.imageOverlay.imagePath) {
      const imageData = taskData.imageOverlay;
      inputIndex = 1;
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á image overlay ‡∏ï‡∏≤‡∏° video resolution
      const videoWidth = parseInt(videoSize.split('x')[0]);
      const videoHeight = parseInt(videoSize.split('x')[1]);
      
      let imageWidth, imageHeight;
      if (imageData.size.includes('x')) {
        [imageWidth, imageHeight] = imageData.size.split('x').map(s => parseInt(s));
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏ô‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ 15% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        imageWidth = Math.round(videoWidth * 0.15);
        imageHeight = Math.round(videoHeight * 0.15);
      }
      
      // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 25% ‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
      const maxWidth = Math.round(videoWidth * 0.25);
      const maxHeight = Math.round(videoHeight * 0.25);
      
      if (imageWidth > maxWidth) imageWidth = maxWidth;
      if (imageHeight > maxHeight) imageHeight = maxHeight;
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á image overlay
      let overlayX = 10, overlayY = 10; // default: ‡∏ö‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
      
      switch (imageData.position) {
        case 'top-left': 
          overlayX = 10; 
          overlayY = 10; 
          break;
        case 'top-center': 
          overlayX = `(main_w-overlay_w)/2`; 
          overlayY = 10; 
          break;
        case 'top-right': 
          overlayX = `main_w-overlay_w-10`; 
          overlayY = 10; 
          break;
        case 'center-left': 
          overlayX = 10; 
          overlayY = `(main_h-overlay_h)/2`; 
          break;
        case 'center': 
          overlayX = `(main_w-overlay_w)/2`; 
          overlayY = `(main_h-overlay_h)/2`; 
          break;
        case 'center-right': 
          overlayX = `main_w-overlay_w-10`; 
          overlayY = `(main_h-overlay_h)/2`; 
          break;
        case 'bottom-left': 
          overlayX = 10; 
          overlayY = `main_h-overlay_h-10`; 
          break;
        case 'bottom-center': 
          overlayX = `(main_w-overlay_w)/2`; 
          overlayY = `main_h-overlay_h-10`; 
          break;
        case 'bottom-right': 
          overlayX = `main_w-overlay_w-10`; 
          overlayY = `main_h-overlay_h-10`; 
          break;
        default: 
          overlayX = imageData.x || 10; 
          overlayY = imageData.y || 10;
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á image filter ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
      const opacity = imageData.opacity || 1.0;
      const imageFilter = `[1:v]scale=${imageWidth}:${imageHeight}:force_original_aspect_ratio=decrease,format=rgba,colorchannelmixer=aa=${opacity}[img_scaled];[text_overlay][img_scaled]overlay=${overlayX}:${overlayY}[final]`;
      filterComplexArray.push(imageFilter);
    }
    
    let ffmpegCommand = ffmpeg(inputPath);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö image overlay
    if (taskData.imageOverlay && taskData.imageOverlay.imagePath) {
      ffmpegCommand = ffmpegCommand.input(taskData.imageOverlay.imagePath);
    }
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô
    let ffmpegProcess;
    
    if (taskData.type === 'trim') {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏î‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á single ‡πÅ‡∏•‡∏∞ multi-segment
      const trimData = taskData.trimData || {};
      const trimMode = trimData.mode || 'single';
      
      if (trimMode === 'multi' && trimData.segments && trimData.segments.length > 0) {
        // Multi-segment trim - ‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        console.log(`üé¨ Processing multi-segment trim: ${trimData.segments.length} segments`);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á filter complex ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö multi-segment
        let segmentFilters = [];
        let overlayFilters = [];
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á filter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ segment
        trimData.segments.forEach((segment, index) => {
          const segmentFilter = `[0:v]trim=start=${segment.start}:end=${segment.end},setpts=PTS-STARTPTS[v${index}]; [0:a]atrim=start=${segment.start}:end=${segment.end},asetpts=PTS-STARTPTS[a${index}]`;
          segmentFilters.push(segmentFilter);
        });
        
        // ‡∏£‡∏ß‡∏° segments ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
        const videoInputs = trimData.segments.map((_, index) => `[v${index}]`).join('');
        const audioInputs = trimData.segments.map((_, index) => `[a${index}]`).join('');
        const concatFilter = `${videoInputs}concat=n=${trimData.segments.length}:v=1:a=0[trimmed_video]; ${audioInputs}concat=n=${trimData.segments.length}:v=0:a=1[trimmed_audio]`;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° overlays ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        let finalVideoOutput = '[trimmed_video]';
        if (trimData.overlays && trimData.overlays.length > 0) {
          trimData.overlays.forEach((overlay, index) => {
            if (overlay.type === 'text') {
              const textFilter = createTextOverlayFilter(overlay, videoSize, finalVideoOutput, `[text_${index}]`);
              overlayFilters.push(textFilter);
              finalVideoOutput = `[text_${index}]`;
            } else if (overlay.type === 'image') {
              // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö image overlay ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° input
              ffmpegCommand = ffmpegCommand.input(overlay.content);
              const imageFilter = createImageOverlayFilter(overlay, videoSize, finalVideoOutput, `[img_${index}]`, index + 1);
              overlayFilters.push(imageFilter);
              finalVideoOutput = `[img_${index}]`;
            }
          });
        }
        
        // ‡∏£‡∏ß‡∏° filters ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const allFilters = [...segmentFilters, concatFilter, ...overlayFilters];
        
        ffmpegProcess = ffmpegCommand
          .complexFilter(allFilters)
          .map(finalVideoOutput) // video output
          .map('[trimmed_audio]')  // audio output
          .videoCodec('libx264')
          .audioCodec('aac')
          .outputOptions([
            '-preset', trimData.processingMode === 'fast' ? 'fast' : 'medium',
            '-crf', '23',
            '-threads', trimData.threads === 'auto' ? '0' : '2',
            '-movflags', '+faststart',
            '-maxrate', '3M',
            '-bufsize', '6M'
          ]);
          
      } else {
        // Single segment trim (‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥)
        console.log(`üé¨ Processing single trim: ${taskData.startTime} - ${taskData.endTime}`);
        
        ffmpegProcess = ffmpegCommand
          .seekInput(taskData.startTime)
          .duration(calculateDuration(taskData.startTime, taskData.endTime))
          .size(videoSize)
          .videoCodec('libx264')
          .audioCodec('aac')
          .outputOptions([
            '-preset', 'fast',
            '-crf', '23',
            '-threads', '2',
            '-movflags', '+faststart',
            '-maxrate', '3M',
            '-bufsize', '6M'
          ]);
      }
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ (convert)
      ffmpegProcess = ffmpegCommand
        .size(videoSize)
        .videoCodec('libx264')
        .outputOptions([
          '-preset', 'fast',        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å medium ‡πÄ‡∏õ‡πá‡∏ô fast ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
          '-crf', '23',             // ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å 24 ‡πÄ‡∏õ‡πá‡∏ô 23 (‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
          '-threads', '2',          // ‡πÉ‡∏ä‡πâ 2 threads ‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô (2 ‡∏á‡∏≤‡∏ô = 4 threads ‡∏£‡∏ß‡∏°)
          '-movflags', '+faststart',// optimized for streaming
          '-maxrate', '3M',         // ‡πÄ‡∏û‡∏¥‡πà‡∏° bitrate ‡∏à‡∏≤‡∏Å 2M ‡πÄ‡∏õ‡πá‡∏ô 3M
          '-bufsize', '6M',         // ‡πÄ‡∏û‡∏¥‡πà‡∏° buffer ‡∏à‡∏≤‡∏Å 4M ‡πÄ‡∏õ‡πá‡∏ô 6M
          ...(filterComplexArray.length > 0 ? ['-filter_complex', filterComplexArray.join(';')] : []),
          ...(taskData.imageOverlay ? ['-map', '[final]'] : taskData.textOverlay ? ['-map', '[text_overlay]'] : [])
        ]);
    }
    
    ffmpegProcess
      .on('start', (commandLine) => {
        console.log('Spawned FFmpeg with command: ' + commandLine);
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ nice priority ‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô (‡∏•‡∏î nice value)
        if (process.platform !== 'win32') {
          try {
            const { spawn } = require('child_process');
            spawn('renice', ['0', '-p', process.pid], { stdio: 'ignore' }); // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 0 (normal priority)
          } catch (error) {
            console.log('Could not set process priority:', error.message);
          }
        }
      })
      .on('progress', async (progress) => {
        const percent = Math.round(progress.percent) || 0;
        console.log(`Processing progress for task ${taskId}: ${percent}%`);
        await Task.updateOne({ taskId }, { status: 'processing', percent });

        await Storage.findOneAndUpdate(
          { _id: new mongoose.Types.ObjectId(taskData.storage) },
          { $set: { [`transcode.${taskData.quality}`]: percent } },
          { new: true }
        ).exec();
      })
      .on('end', async () => {
        try {
          console.log('ffmpeg process completed for task:', taskId);
          delete ffmpegProcesses[taskId];
          await Task.updateOne({ taskId }, { status: 'completed', outputFile: `/${outputFileName}` });
          
          // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á S3
          const fileContent = fs.readFileSync(outputPath);
          const params = {
            Bucket: `${taskData.space.s3Bucket}`,
            Key: `outputs/${outputFileName}`,
            Body: fileContent,
            ACL: 'public-read'
          };

          const uploadResult = await s3Client.putObject(params);
          const remoteUrl = `${taskData.space.s3Endpoint}outputs/${outputFileName}`;

          await Storage.findOneAndUpdate(
            { _id: new mongoose.Types.ObjectId(taskData.storage) },
            { $set: { [`transcode.${taskData.quality}`]: remoteUrl } },
            { new: true }
          ).exec();

          console.log("Storage updated with remote URL:", remoteUrl);
          
          // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
          if (taskData.url) {
            await cleanupTempFiles(inputPath, null);
          }
          await cleanupTempFiles(null, outputPath);
          
        } catch (uploadError) {
          console.error('Error in post-processing for task:', taskId, uploadError);
          await Task.updateOne({ taskId }, { status: 'error', error: uploadError.message });
        } finally {
          concurrentJobs--; // ‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏á‡∏≤‡∏ô
          console.log(`Task ${taskId} finished. Active jobs: ${concurrentJobs}/${MAX_CONCURRENT_JOBS}`);
          processNextQueue(); // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        }
      })
      .on('error', async (err) => {
        try {
          console.error('ffmpeg process error for task:', taskId, err);
          delete ffmpegProcesses[taskId];
          await Task.updateOne({ taskId }, { status: 'error', error: err.message });
          
          // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
          await cleanupTempFiles(inputPath, outputPath);
          
        } catch (cleanupError) {
          console.error('Error during cleanup for task:', taskId, cleanupError);
        } finally {
          concurrentJobs--; // ‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏á‡∏≤‡∏ô
          console.log(`Task ${taskId} failed. Active jobs: ${concurrentJobs}/${MAX_CONCURRENT_JOBS}`);
          processNextQueue(); // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        }
      });

    // ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á process ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° timeout
    ffmpegProcesses[taskId] = ffmpegProcess;
    
    // ‡∏ï‡∏±‡πâ‡∏á timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ffmpeg process
    const timeoutId = setTimeout(async () => {
      if (ffmpegProcesses[taskId]) {
        console.log(`FFmpeg timeout for task: ${taskId}`);
        ffmpegProcesses[taskId].kill('SIGTERM');
        delete ffmpegProcesses[taskId];
        await Task.updateOne({ taskId }, { status: 'error', error: 'Processing timeout' });
        await cleanupTempFiles(inputPath, outputPath);
        concurrentJobs--;
        processNextQueue();
      }
    }, FFMPEG_TIMEOUT);

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    ffmpegProcess.save(outputPath);

  } catch (error) {
    console.error('Error in processQueue for task:', taskId, error);
    await Task.updateOne({ taskId }, { status: 'error', error: error.message });
    
    await Storage.findOneAndUpdate(
      { _id: new mongoose.Types.ObjectId(taskData.storage) },
      { $set: { [`transcode.${taskData.quality}`]: 'error' } },
      { new: true }
    ).exec();
    
    await cleanupTempFiles(inputPath, outputPath);
    concurrentJobs--;
    console.log(`Task ${taskId} error. Active jobs: ${concurrentJobs}/${MAX_CONCURRENT_JOBS}`);
    processNextQueue();
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
function calculatePercent(taskData) {
  return taskData.percent || 0; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
async function processNextQueue() {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (concurrentJobs >= MAX_CONCURRENT_JOBS) {
    console.log(`Cannot process next queue: ${concurrentJobs}/${MAX_CONCURRENT_JOBS} jobs active`);
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö system load
  const systemLoad = await checkSystemLoad();
  if (!systemLoad.canProcess) {
    console.log(`System overloaded (CPU: ${systemLoad.cpuUsage}%, Memory: ${systemLoad.memoryUsage}%). Delaying queue processing.`);
    // ‡∏£‡∏≠ 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    setTimeout(processNextQueue, 60000);
    return;
  }

  try {
    const nextTask = await Task.findOneAndUpdate(
      { status: 'queued' },
      { $set: { status: 'processing' } },
      { new: true, sort: { createdAt: 1 } } // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á (FIFO)
    );
    
    if (nextTask) {
      console.log(`Found next task: ${nextTask.taskId} (System: CPU ${systemLoad.cpuUsage}%, Memory ${systemLoad.memoryUsage}%)`);
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÇ‡∏î‡∏¢‡∏°‡∏µ delay ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏û‡∏±‡∏Å
      setTimeout(() => processQueue(nextTask.taskId, nextTask), 2000);
    } else {
      console.log('No queued tasks found');
    }
  } catch (error) {
    console.error('Error in processNextQueue:', error);
    // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏•‡∏≠‡∏á process ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(processNextQueue, 30000);
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö retry ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà error
async function retryFailedTasks() {
  try {
    const failedTasks = await Task.find({ status: 'error' }).limit(5);
    for (const task of failedTasks) {
      // ‡∏£‡∏≠ 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô retry
      if (Date.now() - new Date(task.createdAt).getTime() > 60000) {
        await Task.updateOne({ taskId: task.taskId }, { status: 'queued', error: null });
        console.log(`Retrying failed task: ${task.taskId}`);
      }
    }
  } catch (error) {
    console.error('Error in retryFailedTasks:', error);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ retry ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
setInterval(retryFailedTasks, 5 * 60 * 1000);

// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
app.get('/check-thai-fonts', (req, res) => {
  try {
    const selectedFont = selectThaiFont();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå TLWG ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const allThaiFonts = [
      '/usr/share/fonts/truetype/tlwg/Garuda.ttf',
      '/usr/share/fonts/truetype/tlwg/Waree.ttf', 
      '/usr/share/fonts/truetype/tlwg/TlwgTypist.ttf',
      '/usr/share/fonts/truetype/tlwg/Kinnari-Italic.ttf',
      '/usr/share/fonts/truetype/tlwg/Loma-Oblique.ttf',
      '/usr/share/fonts/truetype/tlwg/Laksaman-Italic.ttf',
      '/usr/share/fonts/truetype/tlwg/TlwgTypo-Bold.ttf',
      '/usr/share/fonts/truetype/tlwg/TlwgMono-Bold.ttf',
      '/usr/share/fonts/truetype/tlwg/TlwgTypewriter-BoldOblique.ttf'
    ];
    
    const installedFonts = allThaiFonts.filter(fontPath => fs.existsSync(fontPath));
    
    res.json({
      success: true,
      selectedFont: {
        name: selectedFont.name,
        path: selectedFont.path,
        description: selectedFont.description,
        exists: fs.existsSync(selectedFont.path)
      },
      installedThaiFonts: installedFonts.map(fontPath => ({
        path: fontPath,
        name: path.basename(fontPath, '.ttf'),
        exists: fs.existsSync(fontPath)
      })),
      totalInstalled: installedFonts.length,
      platform: process.platform
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

