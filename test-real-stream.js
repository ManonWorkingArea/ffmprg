#!/usr/bin/env node

/**
 * Test Cloudflare Stream Upload with Real Data
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudflare Stream ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
 */

const axios = require('axios');

// Configuration
const BASE_URL = 'http://localhost:3000'; // ‡∏´‡∏£‡∏∑‡∏≠ URL ‡∏Ç‡∏≠‡∏á server ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

// Real test data from your frontend
const testData = {
  url: 'https://vue-project.sgp1.digitaloceanspaces.com/2025/09/1757062947922.mp4',
  site: 'fti.academy',
  storage: '68baa727914117c87b497ceb',
  title: 'Test Video from FTI Academy',
  description: 'Video uploaded from DigitalOcean Spaces to Cloudflare Stream'
};

async function testRealCloudflareStreamUpload() {
  console.log('üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Cloudflare Stream ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á...\n');
  
  try {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
    console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á:');
    console.log('URL:', testData.url);
    console.log('Site:', testData.site);
    console.log('Storage ID:', testData.storage);
    console.log('Title:', testData.title);
    console.log('Description:', testData.description);
    console.log('');
    
    // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    console.log('üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠...');
    
    const uploadResponse = await axios.post(`${BASE_URL}/stream-upload`, testData);
    
    if (uploadResponse.data.success) {
      console.log('‚úÖ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      console.log('Task ID:', uploadResponse.data.taskId);
      console.log('Queue Position:', uploadResponse.data.queuePosition);
      console.log('Estimated Wait Time:', uploadResponse.data.estimatedWaitTime);
      console.log('Status Check URL:', uploadResponse.data.statusCheckUrl);
      console.log('Dashboard URL:', uploadResponse.data.dashboardUrl);
      
      const taskId = uploadResponse.data.taskId;
      
      // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      console.log('\n‚è≥ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...');
      await pollTaskStatus(taskId);
      
    } else {
      console.error('‚ùå ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', uploadResponse.data.error);
    }
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

async function pollTaskStatus(taskId) {
  const maxAttempts = 60; // ‡∏£‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  let attempt = 0;
  
  while (attempt < maxAttempts) {
    try {
      const response = await axios.get(`${BASE_URL}/status/${taskId}`);
      
      if (response.data.success) {
        const task = response.data.task;
        
        const statusEmoji = {
          'queued': '‚è≥',
          'downloading': 'üì•',
          'processing': '‚ö°',
          'completed': '‚úÖ',
          'error': '‚ùå'
        };
        
        console.log(`[${new Date().toLocaleTimeString()}] ${statusEmoji[task.status] || '‚ùì'} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${task.status} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${task.percent || 0}%`);
        
        if (task.status === 'completed') {
          console.log('\nüéâ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!');
          console.log('‚îÅ'.repeat(50));
          console.log('üì∫ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ Cloudflare Stream:');
          console.log('Stream ID:', task.cloudflareStreamId);
          console.log('Playback URL:', task.cloudflarePlaybackUrl);
          console.log('CF Status:', task.cloudflareStreamStatus);
          console.log('Completed At:', new Date(task.completedAt).toLocaleString('th-TH'));
          
          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata
          if (task.cloudflareStreamMeta) {
            console.log('\nüìã Metadata:');
            console.log('Title:', task.cloudflareStreamMeta.title);
            console.log('Description:', task.cloudflareStreamMeta.description);
            console.log('Original URL:', task.cloudflareStreamMeta.originalUrl);
            console.log('Storage Reference:', task.cloudflareStreamMeta.storageReference);
          }
          
          console.log('\nüîó ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå:');
          console.log('Dashboard:', `${BASE_URL}`);
          console.log('Status API:', `${BASE_URL}/status/${taskId}`);
          if (task.cloudflareStreamId) {
            console.log('Stream Info:', `${BASE_URL}/stream-info/${task.cloudflareStreamId}`);
          }
          
          return;
        } else if (task.status === 'error') {
          console.log('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î:');
          console.log('Error:', task.error);
          console.log('Error Time:', new Date(task.errorAt).toLocaleString('th-TH'));
          return;
        } else if (task.status === 'stopped') {
          console.log('\n‚èπÔ∏è ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î');
          return;
        }
        
        // ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        await new Promise(resolve => setTimeout(resolve, 5000));
        attempt++;
        
      } else {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ:', response.data.error);
        return;
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:', error.message);
      return;
    }
  }
  
  console.log('\n‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠ - ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ URL accessible ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
async function testVideoUrlAccess() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á URL ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠...');
  try {
    const response = await axios.head(testData.url, { timeout: 10000 });
    console.log('‚úÖ URL accessible');
    console.log('Content-Type:', response.headers['content-type']);
    console.log('Content-Length:', response.headers['content-length']);
    console.log('Size:', (parseInt(response.headers['content-length']) / 1024 / 1024).toFixed(2) + ' MB');
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á URL ‡πÑ‡∏î‡πâ:', error.message);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async function main() {
  console.log('üß™ Cloudflare Stream Upload Test - Real Data\n');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏Å‡πà‡∏≠‡∏ô
  await testVideoUrlAccess();
  console.log('\n' + '='.repeat(50) + '\n');
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
  await testRealCloudflareStreamUpload();
  
  console.log('\n‚ú® ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  testRealCloudflareStreamUpload,
  testVideoUrlAccess
};
