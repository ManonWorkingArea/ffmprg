#!/usr/bin/env node

/**
 * Test Cloudflare Stream Upload with Form Data
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å frontend
 */

const axios = require('axios');
const FormData = require('form-data');

// Configuration
const BASE_URL = 'http://localhost:3000';

// Test data ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
const testData = {
  url: 'https://vue-project.sgp1.digitaloceanspaces.com/2025/09/1757062947922.mp4',
  site: 'fti.academy',
  storage: '68baa727914117c87b497ceb',
  title: 'Test Video from FTI Academy',
  description: 'Video uploaded for testing Cloudflare Stream integration'
};

async function testWithFormData() {
  console.log('üß™ Testing Cloudflare Stream Upload with Form Data...\n');
  
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData
    const formData = new FormData();
    formData.append('url', testData.url);
    formData.append('site', testData.site);
    formData.append('storage', testData.storage);
    formData.append('title', testData.title);
    formData.append('description', testData.description);
    
    console.log('üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Form Data...');
    console.log('Data to send:', testData);
    
    const response = await axios.post(`${BASE_URL}/stream-upload`, formData, {
      headers: {
        ...formData.getHeaders()
      }
    });
    
    if (response.data.success) {
      console.log('‚úÖ Upload request successful!');
      console.log('Task ID:', response.data.taskId);
      console.log('Type:', response.data.type);
      console.log('Queue Position:', response.data.queuePosition);
      
      const taskId = response.data.taskId;
      
      // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      console.log('\n‚è≥ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...');
      await pollTaskStatus(taskId);
      
    } else {
      console.error('‚ùå Upload request failed:', response.data.error);
    }
    
  } catch (error) {
    console.error('‚ùå Error occurred:', error.message);
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Response:', error.response.data);
    }
  }
}

async function testWithJSON() {
  console.log('\nüß™ Testing Cloudflare Stream Upload with JSON...\n');
  
  try {
    console.log('üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô JSON...');
    console.log('Data to send:', testData);
    
    const response = await axios.post(`${BASE_URL}/stream-upload`, testData, {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (response.data.success) {
      console.log('‚úÖ JSON Upload request successful!');
      console.log('Task ID:', response.data.taskId);
      console.log('Type:', response.data.type);
      console.log('Queue Position:', response.data.queuePosition);
    } else {
      console.error('‚ùå JSON Upload request failed:', response.data.error);
    }
    
  } catch (error) {
    console.error('‚ùå JSON Error occurred:', error.message);
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Response:', error.response.data);
    }
  }
}

async function pollTaskStatus(taskId) {
  const maxAttempts = 60; // ‡∏£‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  let attempt = 0;
  
  while (attempt < maxAttempts) {
    try {
      const response = await axios.get(`${BASE_URL}/status/${taskId}`);
      
      if (response.data.success) {
        const task = response.data.task;
        
        console.log(`[${new Date().toLocaleTimeString()}] ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${task.status} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${task.percent || 0}%`);
        
        if (task.status === 'completed') {
          console.log('\nüéâ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!');
          console.log('Stream ID:', task.cloudflareStreamId);
          console.log('Playback URL:', task.cloudflarePlaybackUrl);
          console.log('CF Status:', task.cloudflareStreamStatus);
          
          if (task.cloudflareStreamMeta) {
            console.log('\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:');
            console.log('Title:', task.cloudflareStreamMeta.title);
            console.log('Description:', task.cloudflareStreamMeta.description);
            console.log('Storage Reference:', task.cloudflareStreamMeta.storageReference);
          }
          
          return;
        } else if (task.status === 'error') {
          console.log('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', task.error);
          return;
        } else if (task.status === 'stopped') {
          console.log('\n‚èπÔ∏è ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î');
          return;
        }
        
        await new Promise(resolve => setTimeout(resolve, 5000));
        attempt++;
        
      } else {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ:', response.data.error);
        return;
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:', error.message);
      return;
    }
  }
  
  console.log('\n‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠');
}

// Test ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô
async function testConnection() {
  try {
    const response = await axios.get(`${BASE_URL}/system-status`);
    console.log('‚úÖ Server is running');
    console.log('Active jobs:', response.data.system?.concurrentJobs || 0);
    return true;
  } catch (error) {
    console.error('‚ùå Cannot connect to server:', error.message);
    console.error('Please make sure the server is running on', BASE_URL);
    return false;
  }
}

async function main() {
  console.log('üöÄ Cloudflare Stream Upload Test');
  console.log('Base URL:', BASE_URL);
  console.log('Test Data:', testData);
  console.log('\n' + '='.repeat(60) + '\n');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  const connected = await testConnection();
  if (!connected) {
    return;
  }
  
  console.log('\n' + '='.repeat(60) + '\n');
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Form Data (‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà frontend ‡∏™‡πà‡∏á‡∏°‡∏≤)
  await testWithFormData();
  
  console.log('\n' + '='.repeat(60) + '\n');
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ JSON (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö)
  await testWithJSON();
  
  console.log('\n‚ú® ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  testWithFormData,
  testWithJSON,
  pollTaskStatus
};
