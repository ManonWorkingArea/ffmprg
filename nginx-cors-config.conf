# Nginx CORS Configuration for Media Recording API
# Place this in your nginx server configuration

server {
    listen 443 ssl http2;
    server_name media.cloudrestfulapi.com;
    
    # SSL configuration (adjust paths as needed)
    ssl_certificate /path/to/your/ssl/certificate.crt;
    ssl_certificate_key /path/to/your/ssl/private.key;
    
    # Increase client body size for large video chunks
    client_max_body_size 100M;
    client_body_timeout 300s;
    client_header_timeout 60s;
    
    # Buffer settings for large uploads
    client_body_buffer_size 512k;
    
    # Proxy timeout settings
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    send_timeout 300s;
    
    # CORS Configuration
    location / {
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control, X-Session-ID, X-Chunk-Index, X-Total-Chunks, X-File-Name, X-File-Size, Content-Length' always;
            add_header 'Access-Control-Max-Age' 86400 always;
            add_header 'Content-Length' 0 always;
            add_header 'Content-Type' 'text/plain' always;
            return 204;
        }
        
        # Add CORS headers to all responses
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control, X-Session-ID, X-Chunk-Index, X-Total-Chunks, X-File-Name, X-File-Size, Content-Length' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range, X-Session-ID, X-Upload-Status' always;
        
        # Proxy to your Node.js application
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
    
    # Specific configuration for media recording endpoints with extended timeouts
    location /api/media/ {
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control, X-Session-ID, X-Chunk-Index, X-Total-Chunks, X-File-Name, X-File-Size, Content-Length' always;
            add_header 'Access-Control-Max-Age' 86400 always;
            add_header 'Content-Length' 0 always;
            add_header 'Content-Type' 'text/plain' always;
            return 204;
        }
        
        # Add CORS headers to all responses
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control, X-Session-ID, X-Chunk-Index, X-Total-Chunks, X-File-Name, X-File-Size, Content-Length' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range, X-Session-ID, X-Upload-Status' always;
        
        # Extended timeouts for large file uploads
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
        proxy_connect_timeout 600s;
        
        # Increase buffer sizes for large uploads
        proxy_buffering off;
        proxy_request_buffering off;
        
        # Proxy to your Node.js application
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
    
    # Error pages
    error_page 413 /413.html;
    location = /413.html {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Content-Type' 'application/json' always;
        return 413 '{"success": false, "error": "Request entity too large. Maximum upload size is 100MB."}';
    }
    
    # Logging
    access_log /var/log/nginx/media.cloudrestfulapi.com_access.log;
    error_log /var/log/nginx/media.cloudrestfulapi.com_error.log warn;
}

# HTTP redirect to HTTPS
server {
    listen 80;
    server_name media.cloudrestfulapi.com;
    return 301 https://$server_name$request_uri;
}